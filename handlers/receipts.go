package handlers

import (
	"errors"
	"strconv"
	"time"

	"example.com/e/models"
	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
)

// Description:

// Takes in a JSON receipt (see example in the example directory) and returns a JSON object with an ID generated by your code.

// The ID returned is the ID that should be passed into `/receipts/{id}/points` to get the number of points the receipt
// was awarded.

// How many points should be earned are defined by the rules below.

// Reminder: Data does not need to survive an application restart. This is to allow you to use in-memory solutions to track any data generated by this endpoint.

// Example Response:
// ```json
// { "id": "7fb1377b-b223-49d9-a31a-5a02701dd310" }
// ```

var Receipts = make(map[string]models.Receipt)

// ProcessReceipt handles POST /receipts/process
// returns a JSON object with an ID generated by your code.
func ProcessReceipt(c *fiber.Ctx) error {
	receipt := models.Receipt{}
	if err := c.BodyParser(&receipt); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request body"})
	}

	// validate structure of the receipt based on example
	if err := validateReceipt(receipt); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
	}

	// generate a unique id for the receipt
	id := uuid.New().String()

	// store the receipt in memory
	Receipts[id] = receipt

	return c.JSON(fiber.Map{
		"id": id,
	})
}

func validateReceipt(receipt models.Receipt) error {
	// Check retailer is not empty
	if receipt.Retailer == "" {
		return errors.New("retailer is required")
	}
	// Parse purchaseDate
	_, err := time.Parse("2006-01-02", receipt.PurchaseDate)
	if err != nil {
		return errors.New("purchaseDate format is invalid")
	}
	// Parse purchaseTime
	_, err = time.Parse("15:04", receipt.PurchaseTime)
	if err != nil {
		return errors.New("purchaseTime format is invalid")
	}
	// Parse total
	total, err := strconv.ParseFloat(receipt.Total, 64)
	if err != nil || total < 0 {
		return errors.New("total is not a valid number or is negative")
	}
	// Validate items
	if len(receipt.Items) == 0 {
		return errors.New("items array is empty")
	}
	for _, item := range receipt.Items {
		if item.ShortDescription == "" {
			return errors.New("shortDescription is required for all items")
		}
		_, err := strconv.ParseFloat(item.Price, 64)
		if err != nil {
			return errors.New("price is not a valid number for an item")
		}
	}
	return nil
}
